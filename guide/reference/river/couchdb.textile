---
layout: guide
title: CouchDB River
cat: guide
sidebar: reference_river
---

p. The CouchDB River allows to automatically index couchdb and make it searchable using the excellent "_changes":http://guide.couchdb.org/draft/notifications.html stream couchdb provides. Setting it up is as simple as executing the following against elasticsearch:

<pre class="prettyprint">
curl -XPUT 'localhost:9200/_river/my_db/_meta' -d '{
    "type" : "couchdb",
    "couchdb" : {
        "host" : "localhost",
        "port" : 5984,
        "db" : "my_db",
        "filter" : null
    },
    "index" : {
        "index" : "my_db",
        "type" : "my_db",
        "bulk_size" : "100",
        "bulk_timeout" : "10ms"
    }
}'
</pre>

p. This call will create a river that uses the @_changes@ stream to index all data within couchdb. Moreover, any "future" changes will automatically be indexed as well, making your search index and couchdb synchronized at all times.

p. The couchdb river is provided as a "plugin":https://github.com/elasticsearch/elasticsearch-river-couchdb (including explanation on how to install it).

p. On top of that, in case of a failover, the couchdb river will automatically be started on another elasticsearch node, and continue indexing from the last indexed seq.

h1. Bulking

p. Bulking is automatically done in order to speed up the indexing process. If within the specified @bulk_timeout@ more changes are detected, changes will be bulked up to @bulk_size@ before they are indexed.

h1. Filtering

p. The `changes` stream allows to provide a filter with parameters that will be used by couchdb to filter the stream of changes. Here is how ti can be configured:

<pre class="prettyprint lang-js">
{
    "couchdb" : {
        "filter" : "test",
        "filter_params" : {
            "param1" : "value1",
            "param2" : "value2"
        }
    }
}
</pre>

h1. Script Filters

p. Filtering can also be performed by providing a script (default to JavaScript) that will further process each changed item within the changes stream. The json provided to the script is under a var called @ctx@ with the relevant seq stream change (for example, @ctx.doc@ will refer to the document, or @ctx.deleted@ is the flag if its deleted or not).

p. Note, this feature requires the `lang-javascript` plugin.

p. The @ctx.doc@ can be changed and its value can will be indexed (assuming its not a deleted change). Also, if @ctx.ignore@ is set to true, the change seq will be ignore and not applied.

p. Other possible values that can be set are @ctx.index@ to control the index name to index the doc into, @ctx.type@ to control the (mapping) type to index into, @ctx._parent@ and @ctx._routing@.

p. Here is an example setting that adds `field1` with value `value1` to all docs:

<pre class="prettyprint lang-js">
{
    "type" : "couchdb",
    "couchdb" : {
        "script" : "ctx.doc.field1 = 'value1'"
    }
}
</pre>

h1. Basic Authentication

Basic Authentication can be used by passing the @user@ and @password@ attributes.

<pre class="prettyprint lang-js">
{
    "type" : "couchdb",
    "couchdb" : {
        "user" : "alice",
        "password" : "secret"
    }
}
</pre>

h1. HTTPS

To use HTTPS, pass the @protocol@ field. Most likely, you will also have to change the @port@. If you have unfixable problems with the servers certificates for any reason, you can disable hostname verification by passing @no_verify@.

<pre class="prettyprint lang-js">
{
    "type" : "couchdb",
    "couchdb" : {
        "protocol" : "https",
        "port" : 443,
        "no_verify" : "true"
    }
}
</pre>


h1. Indexing attachments

If you have sent attachments to CouchDB, they will be indexed.

Let's create a new CouchDB database and send a document with its attachment:

<pre class="prettyprint">
$ curl -X DELETE http://127.0.0.1:5984/my_db
{"error":"not_found","reason":"missing"}
$ curl -X PUT http://127.0.0.1:5984/my_db
{"ok":true}
$ curl -X PUT http://127.0.0.1:5984/my_db/doc1 -d '{"title":"just a property"}'
{"ok":true,"id":"doc1","rev":"1-9d98f843da363df29619b1cc24747cd6"}
$ curl -X PUT http://127.0.0.1:5984/my_db/doc1/myfile.pdf?rev=1-9d98f843da363df29619b1cc24747cd6 --data-binary @myfile.pdf -H "Content-Type: application/pdf"
{"ok":true,"id":"doc1","rev":"2-9b2136bcc1630b38b60ddf2269052a7b"}
</pre>

If you start the river with @ignoreAttachements@ field set to false (default), your attachments will be searchable as well.

Attachments are put in @_attachments@ field which is created by default when starting the river on a new index.
So if you want to define your own mapping for your type, you have to define the @_attachments@ field:
<pre class="prettyprint">
$ curl -X PUT http://127.0.0.1:9200/my_db/my_db/_mapping -d '{
  "my_db": {
    "properties": {
      "_attachments": {
        "properties": {
          "attachment": {
            "type": "attachment"
          }
        }
      },
      "yourfield" : {
        "type": "string"
      }
    }
  }
}'
</pre>

